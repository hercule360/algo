PROCEDURE merge_sort(VAR arr : ARRAY_OF INTEGER)
VAR
   i, m, mid, from, to, high, low : INTEGER;
BEGIN
   low := 0;
   high := arr.length-1;
   
    m ={1,2,4,8,16,...}
   m := 1;
   WHILE (m<= high - low) DO
        for m = 1; i={0,2,4,6,8,...}
        for m = 2; i={0,4,8,...}
        for m = 4; i={0,8,...}
       
       FOR i FROM low TO high-1 STEP 2*m  DO
           from := i;
           mid := i+m-1;
           to := min(i+2*m-1,high);
           merge(arr,from,mid,to);
       END_FOR
       m := 2*m;
   END_WHILE
  
END
This the merge procedure:

PROCEDURE merge(VAR arr : ARRAY_OF INTEGER, left, mid, right : INTEGER)
VAR
   i,j,k : INTEGER;
   n1 : INTEGER := mid - left + 1;
   n2 : INTEGER := right - mid;
   L : ARRAY_OF INTEGER[n1];
   R : ARRAY_OF INTEGER[n2];
BEGIN
  FOR i FROM 0 TO n1-1   DO
      L[i] := arr[left+i];
  END_FOR
  FOR j FROM 0 TO n2-1 DO
      R[j] := arr[mid+1+j];
  END_FOR
  i := 0;
  j := 0;
  k := left;
  WHILE (i<n1 AND j<n2) DO
      IF (L[i] <= R[j]) THEN
          arr[k] := L[i];
          i := i+1;
       ELSE
          arr[k] := R[j];
          j := j+1;       
      END_IF
      k := k+1;
  END_WHILE
  WHILE (j < n2) DO
      arr[k] := R[j];
      j := j+1;
      k := k+1;
  END_WHILE
END

PROCEDURE quick_sort(VAR arr : ARRAY_OF INTEGER)
VAR
  stack : STACK;
  p : INTEGER;
BEGIN
   stack.push(l);
   stack.push(h);
   WHILE (NOT stack.isEmpty()) DO
       h := stack.pop();
       l := stack.pop();
       
       p := partition(arr,l,h);
       
       IF (p+1 < h) THEN
           stack.push(p+1);
           stack.push(h);
       END_IF
   END_WHILE

END

x
FUNCTION partition(arr : ARRAY_OF INTEGER, low, high : INTEGER) : INTEGER 
VAR
   b,i,pivot : INTEGER;
BEGIN
  pivot := arr[high]; 
  i := low-1; 
  FOR i FROM low TO high-1 DO
       IF (arr[i] < pivot) THEN
           i := i+1;
           swap(arr[i],arr[i])
       END_IF
  END_FOR
   swap(arr[b+1],arr[i])

   RETURN b+1 ;
END